"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useInteraction = exports.useVariable = exports.useConfig = exports.useElementData = exports.useElementColumns = exports.useLoadingState = exports.useEditorPanelConfig = exports.usePlugin = void 0;
const react_1 = require("react");
const Context_1 = require("./Context");
const deepEqual_1 = require("../utils/deepEqual");
/**
 * Gets the entire plugin instance
 * @returns {PluginInstance} Context for the current plugin instance
 */
function usePlugin() {
    return (0, react_1.useContext)(Context_1.PluginContext);
}
exports.usePlugin = usePlugin;
/**
 * Provides a setter for the Plugin's Config Options
 * @param {CustomPluginConfigOptions[]} nextOptions Updated possible Config Options
 */
function useEditorPanelConfig(nextOptions) {
    const client = usePlugin();
    const optionsRef = (0, react_1.useRef)({});
    (0, react_1.useEffect)(() => {
        if (nextOptions == null)
            return;
        if (!(0, deepEqual_1.deepEqual)(nextOptions, optionsRef.current)) {
            client.config.configureEditorPanel(nextOptions);
            optionsRef.current = nextOptions;
        }
    }, [client, nextOptions]);
}
exports.useEditorPanelConfig = useEditorPanelConfig;
/**
 * React hook for Plugin Config loading state
 * @param {boolean} initialState Initial value to set loading state to
 * @returns {[boolean, Function]} Boolean value corresponding to loading state for plugin config and setter for loading state
 */
function useLoadingState(initialState) {
    const client = usePlugin();
    const [loading, setLoading] = (0, react_1.useState)(() => {
        client.config.setLoadingState(initialState);
        return initialState;
    });
    return [
        loading,
        nextState => {
            if (nextState === loading)
                return;
            setLoading(nextState);
            client.config.setLoadingState(nextState);
        },
    ];
}
exports.useLoadingState = useLoadingState;
/**
 * Provides the latest column values from corresponding sheet
 * @param {string} id Sheet ID to retrieve from workbook
 * @returns {WorkbookElementColumns} Values of corresponding columns contained within the sheet
 */
function useElementColumns(id) {
    const client = usePlugin();
    const [columns, setColumns] = (0, react_1.useState)({});
    (0, react_1.useEffect)(() => {
        if (id) {
            return client.elements.subscribeToElementColumns(id, setColumns);
        }
    }, [client, id]);
    return columns;
}
exports.useElementColumns = useElementColumns;
/**
 * Provides the latest data values from corresponding sheet
 * @param {string} id Sheet ID to get element data from
 * @returns {WorkbookElementData} Element Data for corresponding sheet, if any
 */
function useElementData(id) {
    const client = usePlugin();
    const [data, setData] = (0, react_1.useState)({});
    (0, react_1.useEffect)(() => {
        if (id) {
            return client.elements.subscribeToElementData(id, setData);
        }
    }, [client, id]);
    return data;
}
exports.useElementData = useElementData;
/**
 * Provides the latest value for entire config or certain key within the config
 * @param {string} key Key within Plugin Config, optional
 * @returns Entire config if no key passed in or value for key within plugin config
 */
function useConfig(key) {
    const client = usePlugin();
    const [config, setConfig] = (0, react_1.useState)(key != null ? client.config.getKey(key) : client.config.get());
    (0, react_1.useEffect)(() => client.config.subscribe(newConfig => {
        if (key != null && newConfig[key] !== config[key]) {
            setConfig(newConfig[key]);
        }
        else {
            setConfig(newConfig);
        }
    }), [client]);
    return config;
}
exports.useConfig = useConfig;
/**
 * React hook for accessing a workbook variable
 * @param {string} id ID of variable within Plugin Config to use
 * @returns {[(WorkbookVariable | undefined), Function]} Constantly updating value of the variable and setter for the variable
 */
function useVariable(id) {
    const client = usePlugin();
    const [workbookVariable, setWorkbookVariable] = (0, react_1.useState)();
    (0, react_1.useEffect)(() => {
        return client.config.subscribeToWorkbookVariable(id, setWorkbookVariable);
    }, [client, id]);
    const setVariable = (0, react_1.useCallback)((...values) => client.config.setVariable(id, ...values), [id]);
    return [workbookVariable, setVariable];
}
exports.useVariable = useVariable;
/**
 * React hook for accessing a workbook interaction selections state
 * @param {string} id ID of variable within Plugin Config to use
 * @returns {[(WorkbookSelection | undefined), Function]} Constantly updating selection state and setter thereof
 */
function useInteraction(id, elementId) {
    const client = usePlugin();
    const [workbookInteraction, setWorkbookInteraction] = (0, react_1.useState)();
    (0, react_1.useEffect)(() => {
        return client.config.subscribeToWorkbookInteraction(id, setWorkbookInteraction);
    }, [client, id]);
    const setInteraction = (0, react_1.useCallback)((value) => {
        client.config.setInteraction(id, elementId, value);
    }, [id]);
    return [workbookInteraction, setInteraction];
}
exports.useInteraction = useInteraction;
