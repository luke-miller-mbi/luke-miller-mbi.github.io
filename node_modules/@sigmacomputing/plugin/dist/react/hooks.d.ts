import { PluginInstance, CustomPluginConfigOptions, WorkbookElementColumns, WorkbookElementData, WorkbookVariable } from '../types';
/**
 * Gets the entire plugin instance
 * @returns {PluginInstance} Context for the current plugin instance
 */
export declare function usePlugin(): PluginInstance<any>;
/**
 * Provides a setter for the Plugin's Config Options
 * @param {CustomPluginConfigOptions[]} nextOptions Updated possible Config Options
 */
export declare function useEditorPanelConfig(nextOptions: CustomPluginConfigOptions[]): void;
/**
 * React hook for Plugin Config loading state
 * @param {boolean} initialState Initial value to set loading state to
 * @returns {[boolean, Function]} Boolean value corresponding to loading state for plugin config and setter for loading state
 */
export declare function useLoadingState(initialState: boolean): [boolean, (nextState: boolean) => void];
/**
 * Provides the latest column values from corresponding sheet
 * @param {string} id Sheet ID to retrieve from workbook
 * @returns {WorkbookElementColumns} Values of corresponding columns contained within the sheet
 */
export declare function useElementColumns(id: string): WorkbookElementColumns;
/**
 * Provides the latest data values from corresponding sheet
 * @param {string} id Sheet ID to get element data from
 * @returns {WorkbookElementData} Element Data for corresponding sheet, if any
 */
export declare function useElementData(id: string): WorkbookElementData;
/**
 * Provides the latest value for entire config or certain key within the config
 * @param {string} key Key within Plugin Config, optional
 * @returns Entire config if no key passed in or value for key within plugin config
 */
export declare function useConfig(key?: string): any;
/**
 * React hook for accessing a workbook variable
 * @param {string} id ID of variable within Plugin Config to use
 * @returns {[(WorkbookVariable | undefined), Function]} Constantly updating value of the variable and setter for the variable
 */
export declare function useVariable(id: string): [WorkbookVariable | undefined, Function];
/**
 * React hook for accessing a workbook interaction selections state
 * @param {string} id ID of variable within Plugin Config to use
 * @returns {[(WorkbookSelection | undefined), Function]} Constantly updating selection state and setter thereof
 */
export declare function useInteraction(id: string, elementId: string): [unknown, Function];
//# sourceMappingURL=hooks.d.ts.map